//*****************************************************************************
/*
 * File:   main.c
 * Author: Pablo
 * Ejemplo de implementación de la comunicación SPI 
 * Código Maestro
 * Created on 10 de febrero de 2020, 03:32 PM
 */
//*****************************************************************************
//*****************************************************************************
// Palabra de configuración
//*****************************************************************************
// CONFIG1
#pragma config FOSC = EXTRC_NOCLKOUT// Oscillator Selection bits (RCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, RC on RA7/OSC1/CLKIN)
#pragma config WDTE = OFF       // Watchdog Timer Enable bit (WDT disabled and can be enabled by SWDTEN bit of the WDTCON register)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // RE3/MCLR pin function select bit (RE3/MCLR pin function is digital input, MCLR internally tied to VDD)
#pragma config CP = OFF         // Code Protection bit (Program memory code protection is disabled)
#pragma config CPD = OFF        // Data Code Protection bit (Data memory code protection is disabled)
#pragma config BOREN = OFF      // Brown Out Reset Selection bits (BOR disabled)
#pragma config IESO = OFF       // Internal External Switchover bit (Internal/External Switchover mode is disabled)
#pragma config FCMEN = OFF      // Fail-Safe Clock Monitor Enabled bit (Fail-Safe Clock Monitor is disabled)
#pragma config LVP = OFF        // Low Voltage Programming Enable bit (RB3 pin has digital I/O, HV on MCLR must be used for programming)

// CONFIG2
#pragma config BOR4V = BOR40V   // Brown-out Reset Selection bit (Brown-out Reset set to 4.0V)
#pragma config WRT = OFF        // Flash Program Memory Self Write Enable bits (Write protection off)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

//*****************************************************************************
// Definición e importación de librerías
//*****************************************************************************


#include <xc.h>
#include <stdlib.h>
#include <stdio.h>
#include "ADC.h"
#include "LCD.h"
#include "MAPEO.h"
#include "SPI.h"



#define _XTAL_FREQ 4000000
#define EN RE1
#define RS RE0
#define D0 RD0
#define D1 RD1
#define D2 RD2
#define D3 RD3
#define D4 RD4
#define D5 RD5
#define D6 RD6
#define D7 RD7

//*****************************************************************************
// Definición de variables
//*****************************************************************************

//*****************************************************************************
// Definición de funciones para que se puedan colocar después del main de lo 
// contrario hay que colocarlos todas las funciones antes del main
//*****************************************************************************
int X, b1,b2;
int V, valor_original, parte_entera;
float valor_mapeado, parte_decimal;
char lcd_buffer[16]; // Buffer para mostrar el resultado en la LCD

/*-------------------------------- PROTOTYPES --------------------------------*/
void ioc_portB(void);
void LCD_Mapeo(void);

void setup(void);

//*****************************************************************************
//Interrupciones
void __interrupt() isr(void){
   

}
/*--------------------------- INTERRUPT SUBROUTINES --------------------------*/

void LCD_Mapeo(void){
    valor_original = V; // Valor original entre 0 y 1023
    valor_mapeado = mapeo_variable(valor_original);
    parte_entera = (int)valor_mapeado;
    parte_decimal = valor_mapeado - parte_entera;
        
}

// Código Principal
//*****************************************************************************
void main(void) {
    
    setup();
    
    Lcd_Init();
    //*************************************************************************
    // Loop infinito
    //*************************************************************************
    while(1){
        LCD_Mapeo();
        Lcd_Clear();
        Lcd_Set_Cursor(1,1);
        Lcd_Write_String("Voltaje");
        Lcd_Set_Cursor(2,1);
        // Formatear el resultado en el buffer para mostrarlo en la LCD
        sprintf(lcd_buffer, "Valor: %d.%02u", parte_entera, (unsigned int)(parte_decimal * 100));
        Lcd_Write_String(lcd_buffer);
        
        if (PORTAbits.RA0 == 1) {  
            b1 = 1;
            b2 = 0;
        } 
        if (PORTAbits.RA1 == 1) {
            b2 = 1;
            b1 = 0;
        }
        if (b1 == 1) {
            PORTCbits.RC2 = 0;       //Slave Select
            
            __delay_ms(1);

            spiWrite(PORTB);
            V = spiRead();
            __delay_ms(1);
            PORTCbits.RC2 = 1;       //Slave Deselect 

            __delay_ms(250);
            
        }
        if (b2 == 1) {
            //Slave 2
           PORTCbits.RC1 = 0;       //Slave Select
           
           __delay_ms(1);

           spiWrite(PORTB);
           V = spiRead();
           __delay_ms(1);
           PORTCbits.RC1 = 1;       //Slave Deselect 

           __delay_ms(250);
        }
        
        
    }
    return;
}
//*****************************************************************************
// Función de Inicialización
//*****************************************************************************

void setup(void){
    ANSEL = 0;
    ANSELH = 0;
    
    TRISA = 0b00000011;
    
    TRISC2 = 0;
    TRISC1= 0;
    
    TRISB = 0;
    TRISD = 0;
    TRISE = 0;

    
    PORTA = 0;
    PORTB = 0;
    PORTD = 0;
    
    PORTCbits.RC2 = 1;
    PORTCbits.RC1 = 1;
    spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SPI_IDLE_2_ACTIVE);
    
    OSCCONbits.IRCF =0b111; 
    OSCCONbits.SCS = 1; 
    
    INTCONbits.GIE = 1;
    INTCONbits.PEIE = 1;
    INTCONbits.T0IE = 1;
    
    INTCONbits.T0IF = 0;
    INTCONbits.RBIF = 0;
    
    
    return;
}

